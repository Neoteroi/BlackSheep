# Modern BlackSheep CI/CD Pipeline
name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      publish_artifacts:
        description: "Publish artifacts (Y|N)"
        required: true
        default: "N"
  release:
    types: [published]
  push:
    branches:
      - main
      - ci
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - "docs/**"
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - "docs/**"

env:
  PROJECT_NAME: blacksheep

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # TODO: windows-validation job
  # Build wheels with cibuildwheel
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [
            # ubuntu-latest,
            # ubuntu-24.04-arm,
            # windows-latest,
            # windows-11-arm,
            macos-15-intel,
            # macos-latest,
          ]

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.0
        env:
          CIBW_BUILD: cp39-* cp310-* cp311-* cp312-* cp313-*
          CIBW_ARCHS: "auto64"

          # Before build commands
          CIBW_BEFORE_BUILD_WINDOWS: >
            python3 -m pip install setuptools wheel Cython==3.1.4 &&
            python -c "import os, glob; [os.remove(f) for f in glob.glob('blacksheep/*.c') + glob.glob('blacksheep/*.so')]" &&
            make compile

          # Unix-based systems (macOS, Linux)
          CIBW_BEFORE_BUILD: >
            python3 -m pip install setuptools wheel Cython==3.1.4 &&
            make clean &&
            make compile

          CIBW_BEFORE_TEST: >
            python3 -m pip install -e "{project}[dev]" &&
            echo "Running linters - if build fails here, please be patient! Feel free to ask for assistance." &&
            flake8 blacksheep &&
            flake8 tests &&
            flake8 itests &&
            isort --check-only blacksheep 2>&1 &&
            isort --check-only tests 2>&1 &&
            isort --check-only itests 2>&1 &&
            black --check blacksheep 2>&1 &&
            black --check tests 2>&1 &&
            black --check itests 2>&1

          CIBW_TEST_COMMAND_WINDOWS: >
            echo "Running unit tests..." &&
            python3 -m pytest {project}\tests &&
            echo "Running integration tests..." &&
            set APP_DEFAULT_ROUTER=false &&
            python3 -m pytest {project}\itests

          # Run tests to ensure wheels work
          CIBW_TEST_COMMAND: >
            echo "Running unit tests..." &&
            python3 -m pytest {project}/tests &&
            echo "Running integration tests..." &&
            export APP_DEFAULT_ROUTER=false &&
            python3 -m pytest {project}/itests

          CIBW_TEST_REQUIRES: pytest
        with:
          output-dir: dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ strategy.job-index }}
          path: dist/*.whl

  # Build PyPy wheel (pure Python)
  build-pypy-wheels:
    needs: build-wheels
    if: true
    # if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["pypy-3.11"]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 9

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -e .[dev]

      - name: Run tests with PyPy
        run: |
          echo "Running unit tests..."
          pytest tests

          echo "Running integration tests..."
          export APP_DEFAULT_ROUTER=false
          pytest itests

      - name: Install build dependencies
        run: |
          pip install --upgrade build

      - name: Build wheels
        run: |
          python -m build

      - uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist

  # Build source distribution
  build-sdist:
    name: Build source distribution
    if: true
    # if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_artifacts == 'Y')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build Cython==3.1.4
      - name: Build sdist
        run: |
          python -m build --sdist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  # Publish to PyPI
  publish:
    runs-on: ubuntu-latest
    needs: [build-wheels, build-pypy-wheels, build-sdist]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_artifacts == 'Y')
    steps:
      - name: Download a distribution artifact
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - name: Use Python 3.12
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install twine
      - name: Publish distribution ðŸ“¦ to Test PyPI
        run: |
          twine upload -r testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.test_pypi_password }}

      - name: Publish distribution ðŸ“¦ to PyPI
        run: |
          twine upload -r pypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
