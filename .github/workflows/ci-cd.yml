# Modern BlackSheep CI/CD Pipeline
name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      publish_artifacts:
        description: 'Publish artifacts (Y|N)'
        required: true
        default: 'N'
  release:
    types: [published]
  push:
    branches:
      - main
      - ci
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - "docs/**"
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - "docs/**"

env:
  PROJECT_NAME: blacksheep

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run code formatting check
        run: |
          black --check --diff blacksheep tests
          isort --check-only --diff blacksheep tests
          
      - name: Run linting
        run: |
          flake8 blacksheep tests
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run pure Python tests
        run: |
          echo "Running unit tests..."
          pytest tests
          echo "Running integration tests..."
          export APP_DEFAULT_ROUTER=false
          pytest itests
          
      - name: Compile Cython extensions
        run: |
          make compile
          
      - name: Run Cython tests
        run: |
          echo "Running unit tests..."
          pytest tests
          echo "Running integration tests..."
          export APP_DEFAULT_ROUTER=false
          pytest itests
          
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # PyPy testing
  test-pypy:
    name: Test PyPy ${{ matrix.pypy-version }} on ${{ matrix.os }}
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-latest]
        pypy-version: ['pypy3.9', 'pypy3.10', 'pypy3.11']

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PyPy
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pypy-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run tests
        run: |
          echo "Running unit tests..."
          pytest tests
          echo "Running integration tests..."
          export APP_DEFAULT_ROUTER=false
          pytest itests
  # Build wheels with cibuildwheel
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: [test]
    # if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    if: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.0.1 
        env:
          CIBW_BUILD: cp39-* cp310-* cp311-* cp312-* cp313-*
          CIBW_ARCHS: "auto64"

          # Before build commands
          CIBW_BEFORE_BUILD_WINDOWS: >
            pip install setuptools wheel Cython==3.1.2 &&
            python -c "import platform; assert platform.python_implementation() != 'PyPy'" &&
            python -c "import os, glob; [os.remove(f) for f in glob.glob('blacksheep/*.c') + glob.glob('blacksheep/*.so')]" &&
            make compile
          
          # Unix-based systems (macOS, Linux)
          CIBW_BEFORE_BUILD_LINUX: >
            pip install setuptools wheel &&
            if python -c "import platform; exit(0 if platform.python_implementation() != 'PyPy' else 1)"; then
              pip install Cython==3.1.2 &&
              make clean &&
              make compile;
            fi
            
          CIBW_BEFORE_BUILD_MACOS: >
            pip install setuptools wheel &&
            if python -c "import platform; exit(0 if platform.python_implementation() != 'PyPy' else 1)"; then
              pip install Cython==3.1.2 &&
              make clean &&
              make compile;
            fi
          
          # Run tests to ensure wheels work
          CIBW_TEST_COMMAND: "pip install -e {project}[dev] && pytest {project}/tests"
          CIBW_TEST_REQUIRES: pytest


      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  # Build PyPy wheel (pure Python)
  build-pypy-wheel:
    name: Build PyPy wheel
    needs: [test-pypy]
    # if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    if: true
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel
      - name: Build pure Python wheel for PyPy
        run: |
          # Set environment variable to produce a pure Python wheel
          export BLACKSHEEP_BUILD_PURE=1
          python -m build --wheel
          mkdir -p wheelhouse
          cp dist/*.whl wheelhouse/
      - name: Upload PyPy wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-pypy
          path: ./wheelhouse/*.whl

  # Build source distribution
  build-sdist:
    name: Build source distribution
    needs: [test]
    if: true
    # if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_artifacts == 'Y')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build Cython==3.1.2
      - name: Build sdist
        run: |
          python -m build --sdist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  # Publish to PyPI
  publish:
    runs-on: ubuntu-latest
    needs: [build-wheels, build-pypy-wheel, build-sdist]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_artifacts == 'Y')
    steps:
      - name: Download a distribution artifact
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - name: Use Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install twine
      - name: Publish distribution ðŸ“¦ to Test PyPI
        run: |
          twine upload -r testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.test_pypi_password }}

      - name: Publish distribution ðŸ“¦ to PyPI
        run: |
          twine upload -r pypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}