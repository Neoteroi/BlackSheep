name: Main

on:
  workflow_dispatch:
    inputs:
      publish_artifacts:
        description: 'Publish artifacts (Y|N)'
        required: true
        default: 'N'
  release:
    types: [published]
  push:
    branches:
      - main
      - ci
    paths-ignore:
      - README.md
      - CHANGELOG.md
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - README.md
      - CHANGELOG.md

env:
  PROJECT_NAME: blacksheep

jobs:
  windows-validation:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12", "3.13"]
    runs-on: windows-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 9
          submodules: false

      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install flake8

      - name: Compile Cython extensions
        run: |
          cython blacksheep/url.pyx
          cython blacksheep/exceptions.pyx
          cython blacksheep/headers.pyx
          cython blacksheep/cookies.pyx
          cython blacksheep/contents.pyx
          cython blacksheep/messages.pyx
          cython blacksheep/scribe.pyx
          cython blacksheep/baseapp.pyx
          python setup.py build_ext --inplace

      - name: Run tests
        run: |
          pytest

      - name: Run linters
        run: |
          flake8 blacksheep
          flake8 tests

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.9, "3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 9
          submodules: false

      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install black==25.1.0 isort==6.0.1 flake8==7.2.0

      - name: Run tests for Pure-Python Code
        run: |
          echo "Running unit tests..."
          pytest tests

          echo "Running integration tests..."
          export APP_DEFAULT_ROUTER=false
          pytest itests

      - name: Compile Cython extensions
        run: |
          make compile

      - name: Run tests with Cython Code
        run: |
          echo "Running unit tests..."
          pytest tests

          echo "Running integration tests..."
          export APP_DEFAULT_ROUTER=false
          pytest itests

      - name: Run tests with Pydantic v1
        run: |
          echo "[*] The previous tests used Pydantic v2, now running with v1"
          pip install -U "pydantic<2"
          echo "Running unit tests..."
          pytest tests

          echo "Running integration tests..."
          export APP_DEFAULT_ROUTER=false
          pytest itests

      - name: Run linters
        run: |
          echo "Running linters - if build fails here, please be patient! Feel free to ask for assistance."

          flake8 blacksheep
          flake8 tests
          flake8 itests
          isort --check-only blacksheep 2>&1
          isort --check-only tests 2>&1
          isort --check-only itests 2>&1
          black --check blacksheep 2>&1
          black --check tests 2>&1
          black --check itests 2>&1

      - name: Test Hypercorn
        run: |
          PYVER=`python -V 2>&1`

          if [ "${PYVER:0:-2}" == "Python 3.10" ]; then
            echo "Skipping Hypercorn tests, since it fails with Python 3.10.0 on Ubuntu (2021/10/24)"
          else
            APP_DEFAULT_ROUTER=false ASGI_SERVER=hypercorn pytest itests/test_server.py
          fi

      - name: Install distribution dependencies
        run: pip install --upgrade twine setuptools wheel
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.12

      - name: Create distribution package
        run: python setup.py sdist
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.12

      - name: Upload distribution package
        uses: actions/upload-artifact@v4
        with:
          name: dist-ubuntu-no-wheels
          path: dist
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == 3.12

  build-cpython-wheels:
    needs: build
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 9

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: |
          pip install cython==3.0.12
          pip install --upgrade build

      - name: Compile Cython extensions
        run: |
          make clean

          cython blacksheep/url.pyx
          cython blacksheep/exceptions.pyx
          cython blacksheep/headers.pyx
          cython blacksheep/cookies.pyx
          cython blacksheep/contents.pyx
          cython blacksheep/messages.pyx
          cython blacksheep/scribe.pyx
          cython blacksheep/baseapp.pyx

      - name: Build wheels (linux)
        if: startsWith(matrix.os, 'ubuntu')
        uses: docker://quay.io/pypa/manylinux2014_x86_64
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        with:
          entrypoint: /github/workspace/.github/workflows/build-manylinux-wheels.sh

      - name: Build wheels (non-linux)
        if: "!startsWith(matrix.os, 'ubuntu')"
        run: |
          python -m build

      - uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist

  build-pypy-wheels:
    needs: build
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["pypy-3.11"]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 9

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.pypy.txt

      - name: Run tests with PyPy
        run: |
          echo "Running unit tests..."
          pytest tests

          echo "Running integration tests..."
          export APP_DEFAULT_ROUTER=false
          pytest itests

      - name: Install build dependencies
        run: |
          pip install --upgrade build

      - name: Build wheels
        run: |
          python -m build

      - uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist

  opt-deps-check:
    needs: build
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 9

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install basic dependencies
        run: |
          BLACKSHEEP_NO_EXTENSIONS="1" pip install -e .

      - name: Test imports with no optional dependencies
        run: |
          cd itests
          echo "Expect no import errorâ€¦"
          python issue606.py

  publish:
    runs-on: ubuntu-latest
    needs: [build, build-cpython-wheels, build-pypy-wheels, opt-deps-check]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_artifacts == 'Y')
    steps:
      - name: Download a distribution artifact
        uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - name: Use Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install twine
      - name: Publish distribution ðŸ“¦ to Test PyPI
        run: |
          twine upload -r testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.test_pypi_password }}

      - name: Publish distribution ðŸ“¦ to PyPI
        run: |
          twine upload -r pypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
